#include <stdio.h>
#include <iostream>
#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "hardware/pio.h"

#include "../drivers/logging/logging.h"
#include "../drivers/microphone/microphone.h"
#include "arm_math.h"

#define CAPTURE_DEPTH 1024 // microphone buffer depth

uint16_t microphone_buffer[CAPTURE_DEPTH];
int16_t time_domain_signal[CAPTURE_DEPTH];
q15_t windowed_signal[CAPTURE_DEPTH];
q15_t fft_out[CAPTURE_DEPTH * 2]; // Complex output (real + imaginary)

q15_t magnitude_squared[CAPTURE_DEPTH / 2]; // Store half the FFT result
//float32_t magnitude_squared_float[CAPTURE_DEPTH / 2]; // Buffer to store float converted values

// Global variable containing the Hanning window coefficients in Q15 format
const int16_t hanning_window[1024] = {
    // Copy the generated coefficients from MATLAB here
    0,0,1,3,5,8,11,15,20,25,31,37,44,52,60,69,79,89,100,111,123,136,149,163,177,192,208,224,241,259,277,296,315,335,355,376,398,420,443,467,491,516,541,567,593,621,648,677,705,735,765,796,827,859,891,924,958,992,1027,1062,1098,1134,1171,1209,1247,1286,1325,1365,1406,1447,1488,1530,1573,1616,1660,1704,1749,1795,1841,1887,1935,1982,2030,2079,2128,2178,2229,2280,2331,2383,2435,2488,2542,2596,2651,2706,2761,2817,2874,2931,2989,3047,3105,3165,3224,3284,3345,3406,3468,3530,3592,3655,3719,3783,3847,3912,3978,4044,4110,4177,4244,4312,4380,4449,4518,4587,4657,4728,4799,4870,4942,5014,5087,5160,5233,5307,5381,5456,5531,5606,5682,5759,5835,5913,5990,6068,6146,6225,6304,6383,6463,6543,6624,6705,6786,6868,6950,7032,7115,7198,7282,7365,7449,7534,7619,7704,7789,7875,7961,8047,8134,8221,8308,8396,8484,8572,8661,8749,8839,8928,9018,9108,9198,9288,9379,9470,9561,9653,9745,9837,9929,10021,10114,10207,10300,10394,10487,10581,10676,10770,10864,10959,11054,11149,11245,11340,11436,11532,11628,11724,11821,11917,12014,12111,12208,12306,12403,12501,12598,12696,12794,12892,12991,13089,13188,13286,13385,13484,13583,13682,13781,13881,13980,14079,14179,14279,14378,14478,14578,14678,14778,14878,14978,15078,15179,15279,15379,15480,15580,15680,15781,15881,15982,16082,16183,16283,16384,16485,16585,16686,16786,16887,16987,17088,17188,17288,17389,17489,17589,17690,17790,17890,17990,18090,18190,18290,18390,18489,18589,18689,18788,18887,18987,19086,19185,19284,19383,19482,19580,19679,19777,19876,19974,20072,20170,20267,20365,20462,20560,20657,20754,20851,20947,21044,21140,21236,21332,21428,21523,21619,21714,21809,21904,21998,22092,22187,22281,22374,22468,22561,22654,22747,22839,22931,23023,23115,23207,23298,23389,23480,23570,23660,23750,23840,23929,24019,24107,24196,24284,24372,24460,24547,24634,24721,24807,24893,24979,25064,25149,25234,25319,25403,25486,25570,25653,25736,25818,25900,25982,26063,26144,26225,26305,26385,26464,26543,26622,26700,26778,26855,26933,27009,27086,27162,27237,27312,27387,27461,27535,27608,27681,27754,27826,27898,27969,28040,28111,28181,28250,28319,28388,28456,28524,28591,28658,28724,28790,28856,28921,28985,29049,29113,29176,29238,29300,29362,29423,29484,29544,29603,29663,29721,29779,29837,29894,29951,30007,30062,30117,30172,30226,30280,30333,30385,30437,30488,30539,30590,30640,30689,30738,30786,30833,30881,30927,30973,31019,31064,31108,31152,31195,31238,31280,31321,31362,31403,31443,31482,31521,31559,31597,31634,31670,31706,31741,31776,31810,31844,31877,31909,31941,31972,32003,32033,32063,32091,32120,32147,32175,32201,32227,32252,32277,32301,32325,32348,32370,32392,32413,32433,32453,32472,32491,32509,32527,32544,32560,32576,32591,32605,32619,32632,32645,32657,32668,32679,32689,32699,32708,32716,32724,32731,32737,32743,32748,32753,32757,32760,32763,32765,32767,32767,32767,32767,32767,32765,32763,32760,32757,32753,32748,32743,32737,32731,32724,32716,32708,32699,32689,32679,32668,32657,32645,32632,32619,32605,32591,32576,32560,32544,32527,32509,32491,32472,32453,32433,32413,32392,32370,32348,32325,32301,32277,32252,32227,32201,32175,32147,32120,32091,32063,32033,32003,31972,31941,31909,31877,31844,31810,31776,31741,31706,31670,31634,31597,31559,31521,31482,31443,31403,31362,31321,31280,31238,31195,31152,31108,31064,31019,30973,30927,30881,30833,30786,30738,30689,30640,30590,30539,30488,30437,30385,30333,30280,30226,30172,30117,30062,30007,29951,29894,29837,29779,29721,29663,29603,29544,29484,29423,29362,29300,29238,29176,29113,29049,28985,28921,28856,28790,28724,28658,28591,28524,28456,28388,28319,28250,28181,28111,28040,27969,27898,27826,27754,27681,27608,27535,27461,27387,27312,27237,27162,27086,27009,26933,26855,26778,26700,26622,26543,26464,26385,26305,26225,26144,26063,25982,25900,25818,25736,25653,25570,25486,25403,25319,25234,25149,25064,24979,24893,24807,24721,24634,24547,24460,24372,24284,24196,24107,24019,23929,23840,23750,23660,23570,23480,23389,23298,23207,23115,23023,22931,22839,22747,22654,22561,22468,22374,22281,22187,22092,21998,21904,21809,21714,21619,21523,21428,21332,21236,21140,21044,20947,20851,20754,20657,20560,20462,20365,20267,20170,20072,19974,19876,19777,19679,19580,19482,19383,19284,19185,19086,18987,18887,18788,18689,18589,18489,18390,18290,18190,18090,17990,17890,17790,17690,17589,17489,17389,17288,17188,17088,16987,16887,16786,16686,16585,16485,16384,16283,16183,16082,15982,15881,15781,15680,15580,15480,15379,15279,15179,15078,14978,14878,14778,14678,14578,14478,14378,14279,14179,14079,13980,13881,13781,13682,13583,13484,13385,13286,13188,13089,12991,12892,12794,12696,12598,12501,12403,12306,12208,12111,12014,11917,11821,11724,11628,11532,11436,11340,11245,11149,11054,10959,10864,10770,10676,10581,10487,10394,10300,10207,10114,10021,9929,9837,9745,9653,9561,9470,9379,9288,9198,9108,9018,8928,8839,8749,8661,8572,8484,8396,8308,8221,8134,8047,7961,7875,7789,7704,7619,7534,7449,7365,7282,7198,7115,7032,6950,6868,6786,6705,6624,6543,6463,6383,6304,6225,6146,6068,5990,5913,5835,5759,5682,5606,5531,5456,5381,5307,5233,5160,5087,5014,4942,4870,4799,4728,4657,4587,4518,4449,4380,4312,4244,4177,4110,4044,3978,3912,3847,3783,3719,3655,3592,3530,3468,3406,3345,3284,3224,3165,3105,3047,2989,2931,2874,2817,2761,2706,2651,2596,2542,2488,2435,2383,2331,2280,2229,2178,2128,2079,2030,1982,1935,1887,1841,1795,1749,1704,1660,1616,1573,1530,1488,1447,1406,1365,1325,1286,1247,1209,1171,1134,1098,1062,1027,992,958,924,891,859,827,796,765,735,705,677,648,621,593,567,541,516,491,467,443,420,398,376,355,335,315,296,277,259,241,224,208,192,177,163,149,136,123,111,100,89,79,69,60,52,44,37,31,25,20,15,11,8,5,3,1,0
};


// Microphone
void Microphone_program() {
    stdio_init_all();
    MICROPHONE microphone;
    microphone.init();

    // Declare FFT instance
    arm_rfft_instance_q15 rfft_instance;
    arm_rfft_init_q15(&rfft_instance, CAPTURE_DEPTH, 0, 1);

    // STEP 1
    microphone.read(microphone_buffer, 1024);

    // STEP 2
    // Calculate the DC bias
    int32_t dc_bias = 0;
    for (int i = 0; i < CAPTURE_DEPTH; i++) {
        dc_bias += microphone_buffer[i];
    }
    dc_bias = dc_bias / CAPTURE_DEPTH;

    // STEP 3
    for (int i = 0; i < CAPTURE_DEPTH; i++) {
        // Step 3: Subtract the DC bias and shift to fit into Q15 format
        // Shift left by 5 bits to amplify the signal (3 bits for 12-bit ADC, +2 extra bits)
        time_domain_signal[i] = (int16_t)((microphone_buffer[i] - dc_bias) << 5);
    }

    // STEP 4
    for (int i = 0; i < CAPTURE_DEPTH; i++) {
        // Multiply each signal value by the corresponding window coefficient
        // Perform a right shift by 15 to normalize the result to Q15 format
        windowed_signal[i] = (int16_t)(((int32_t)time_domain_signal[i] * hanning_window[i]) >> 15);
    }

    // STEP 5
    // Apply the FFT
    arm_rfft_q15(&rfft_instance, windowed_signal, fft_out);

    // STEP 6
    // Calculate magnitude squared
    arm_cmplx_mag_squared_q15(fft_out, magnitude_squared, CAPTURE_DEPTH / 2);

    // Print the windowed signal
    printf("Windowed signal:\n");
    for (uint32_t i = 0; i < CAPTURE_DEPTH; i++) {
        printf("%i,", windowed_signal[i]);
    }

    // Print the FFT output
    printf("FFT Output:\n");
    for (uint32_t i = 0; i < CAPTURE_DEPTH * 2; i += 2) {
        printf("%i,", fft_out[i]);
    }

    printf("Magnitude Squared:\n");
    // Print the magnitude squared results
    for (uint32_t i = 0; i < CAPTURE_DEPTH/2; i++) {
        // Convert Q15 to float for printing
        float32_t magnitude_squared_float = (float32_t)magnitude_squared[i] / 32768.0f;
        printf("%f,", magnitude_squared_float);
    }


}